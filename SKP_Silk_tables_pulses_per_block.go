package silk

import "math"

var SKP_Silk_max_pulses_table [4]int32 = [4]int32{6, 8, 12, 18}
var SKP_Silk_pulses_per_block_CDF [10][21]uint16 = [10][21]uint16{{0, 0xB809, 0xF03D, 64590, 0xFE65, 0xFEFD, 0xFF48, 0xFF7F, 65450, 0xFFC2, 0xFFD0, 0xFFDD, 0xFFE4, 0xFFEA, 0xFFEC, 0xFFF0, 0xFFF1, 0xFFF3, 0xFFF4, 0xFFF6, math.MaxUint16}, {0, 0x6700, 0xBA90, 0xE5B3, 0xF66D, 0xFC37, 0xFE59, 0xFF35, 0xFF90, 0xFFC2, 0xFFDA, 0xFFE7, 0xFFED, 0xFFF0, 0xFFF3, 0xFFF5, 0xFFF6, 0xFFF8, 0xFFF9, 65530, math.MaxUint16}, {0, 9601, 0x6D6E, 0xB335, 57210, 0xF460, 0xFC63, 65260, 0xFFA7, 65500, 0xFFE7, 0xFFEF, 0xFFF1, 0xFFF5, 0xFFF6, 0xFFF9, 65530, 0xFFFB, 0xFFFC, 0xFFFE, math.MaxUint16}, {0, 3351, 0x30AE, 0x6574, 0x9B66, 0xC5FE, 0xE12C, 0xF055, 0xF821, 0xFBFA, 0xFDF1, 0xFEE7, 0xFF5F, 0xFFA1, 0xFFBF, 0xFFD0, 0xFFD9, 0xFFE1, 0xFFE5, 0xFFE8, math.MaxUint16}, {0, 488, 2944, 9295, 0x4D00, 0x7DA0, 0xABC8, 0xCF81, 0xE708, 0xF436, 0xFAD5, 0xFDF8, 0xFF42, 65470, 0xFFE7, 0xFFEB, 0xFFF5, 0xFFF9, 0xFFFB, 0xFFFE, math.MaxUint16}, {0, 0x4275, 0x76C5, 0x9F6C, 0xBC0E, 0xD0DA, 0xDF4E, 0xE9C5, 61650, 0xF599, 0xF8C4, 0xFADF, 0xFC3F, 0xFD2B, 0xFDBF, 0xFE1B, 0xFE57, 0xFE77, 0xFE8D, 0xFE9F, math.MaxUint16}, {0, 2994, 8323, 0x3DE5, 0x5E84, 32300, 39340, 45140, 0xC295, 0xD0E2, 0xDC1D, 0xE496, 0xEB07, 0xEFD5, 0xF369, 0xF5F9, 63410, 0xF8E3, 0xF9A2, 0xFA38, math.MaxUint16}, {0, 88, 721, 2795, 7542, 0x3A28, 24420, 0x8721, 0xAB88, 0xC91C, 0xDE82, 0xEC8E, 62760, 0xFA25, 0xFCCC, 0xFE2D, 0xFEEE, 0xFF4E, 0xFF76, 65420, math.MaxUint16}, {0, 287, 789, 2064, 4398, 8174, 0x34DE, 0x4EB7, 0x6AD3, 0x86E5, 0xA14F, 0xB88A, 52070, 0xD9DC, 0xE45A, 0xEBDD, 0xF0EF, 0xF445, 0xF685, 0xF81F, math.MaxUint16}, {0, 1, 3, 91, 4521, 0x3974, 0x6EA9, 0xA3E3, 0xCB94, 0xE407, 0xF121, 0xF82E, 0xFBCB, 0xFD9C, 0xFE44, 0xFE8C, 0xFE9E, 0xFEAE, 0xFEB3, 0xFEBB, math.MaxUint16}}
var SKP_Silk_pulses_per_block_CDF_offset int32 = 6
var SKP_Silk_pulses_per_block_BITS_Q6 [9][20]int16 = [9][20]int16{{30, 140, 282, 444, 560, 625, 654, 677, 731, 780, 787, 844, 859, 960, 896, 1024, 960, 1024, 960, 821}, {84, 103, 164, 252, 350, 442, 526, 607, 663, 731, 787, 859, 923, 923, 960, 1024, 960, 1024, 1024, 875}, {177, 117, 120, 162, 231, 320, 426, 541, 657, 803, 832, 960, 896, 1024, 923, 1024, 1024, 1024, 960, 1024}, {275, 182, 146, 144, 166, 207, 261, 322, 388, 450, 516, 582, 637, 710, 762, 821, 832, 896, 923, 734}, {452, 303, 216, 170, 153, 158, 182, 220, 274, 337, 406, 489, 579, 681, 896, 811, 896, 960, 923, 1024}, {125, 147, 170, 202, 232, 265, 295, 332, 368, 406, 443, 483, 520, 563, 606, 646, 704, 739, 757, 483}, {285, 232, 200, 190, 193, 206, 224, 244, 266, 289, 315, 340, 367, 394, 425, 462, 496, 539, 561, 350}, {611, 428, 319, 242, 202, 178, 172, 180, 199, 229, 268, 313, 364, 422, 482, 538, 603, 683, 739, 586}, {501, 450, 364, 308, 264, 231, 212, 204, 204, 210, 222, 241, 265, 295, 326, 362, 401, 437, 469, 321}}
var SKP_Silk_rate_levels_CDF [2][10]uint16 = [2][10]uint16{{0, 2005, 0x31AD, 0x4F39, 0x7A60, 0x8D8A, 0xB2F8, 0xE199, 0xF680, math.MaxUint16}, {0, 8553, 0x5BC1, 0x8CBF, 0xB4D7, 0xD10F, 0xDCC7, 0xE70F, 0xFAB9, math.MaxUint16}}
var SKP_Silk_rate_levels_CDF_offset int32 = 4
var SKP_Silk_rate_levels_BITS_Q6 [2][9]int16 = [2][9]int16{{322, 167, 199, 164, 239, 178, 157, 231, 304}, {188, 137, 153, 171, 204, 285, 297, 237, 358}}
var SKP_Silk_shell_code_table0 [33]uint16 = [33]uint16{0, 0x7FEC, math.MaxUint16, 0, 9505, 56230, math.MaxUint16, 0, 4093, 0x7DCC, 61720, math.MaxUint16, 0, 2285, 0x3F4F, 48750, 0xF7C0, math.MaxUint16, 0, 1709, 9446, 0x7D1A, 0xD9C8, 0xF984, math.MaxUint16, 0, 1623, 6986, 0x5555, 0xB145, 0xE70B, 0xFABA, math.MaxUint16}
var SKP_Silk_shell_code_table1 [52]uint16 = [52]uint16{0, 0x7FB3, math.MaxUint16, 0, 0x31EE, 0xCE10, math.MaxUint16, 0, 4847, 0x7F99, 0xEDE3, math.MaxUint16, 0, 2500, 0x4399, 0xBB75, 0xF789, math.MaxUint16, 0, 1843, 0x2859, 0x7EA3, 0xD889, 0xFB15, math.MaxUint16, 0, 1485, 7062, 0x53D9, 0xA996, 0xE6C7, 0xFC6F, math.MaxUint16, 0, 0, 4841, 0x39CD, 0x7C37, 0xC203, 0xEF7D, math.MaxUint16, math.MaxUint16, 0, 0, 0, 8032, 0x54BF, 0xA076, 0xDBFD, math.MaxUint16, math.MaxUint16, math.MaxUint16}
var SKP_Silk_shell_code_table2 [102]uint16 = [102]uint16{0, 0x7F67, math.MaxUint16, 0, 0x386F, 0xC6E0, math.MaxUint16, 0, 6301, 0x7F4B, 0xE7E1, math.MaxUint16, 0, 3038, 0x48D0, 0xB6D9, 0xF584, math.MaxUint16, 0, 1746, 0x291C, 0x7EFD, 0xD7E9, 0xFB16, math.MaxUint16, 0, 1234, 6360, 0x530B, 0xAAC0, 0xE903, 0xFD25, math.MaxUint16, 0, 1020, 4461, 14030, 0x7E1E, 0xC831, 0xF1D0, 65100, math.MaxUint16, 0, 851, 3435, 0x2716, 0x5AC9, 0x9F5D, 0xD894, 0xF621, 0xFEE4, math.MaxUint16, 0, 0, 2075, 7137, 0x42DF, 0x7B0B, 0xB786, 0xE563, 0xF9E8, math.MaxUint16, math.MaxUint16, 0, 0, 0, 3820, 0x2D34, 0x59FE, 0x939D, 0xCB01, 0xEF3B, math.MaxUint16, math.MaxUint16, math.MaxUint16, 0, 0, 0, 0, 6882, 0x41BC, 0x76EC, 0xAF2C, 0xE015, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, 0, 0, 0, 0, 0, 0x276D, 0x59B3, 0x977B, 0xD49A, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16}
var SKP_Silk_shell_code_table3 [207]uint16 = [207]uint16{0, 0x7E44, math.MaxUint16, 0, 0x3BE0, 0xC161, math.MaxUint16, 0, 7474, 0x7E58, 0xE263, math.MaxUint16, 0, 3944, 19450, 0xB134, 0xF1B1, math.MaxUint16, 0, 2338, 0x2DB2, 0x7EB3, 0xD29B, 0xF8F6, math.MaxUint16, 0, 1506, 7074, 0x5512, 0xA7DC, 0xE5ED, 64590, math.MaxUint16, 0, 1027, 4490, 0x382F, 0x7E08, 50980, 0xF110, 0xFE13, math.MaxUint16, 0, 760, 3022, 9696, 0x5AE0, 0xA1F9, 0xDB75, 0xF715, 0xFEE3, math.MaxUint16, 0, 579, 2256, 6873, 0x4115, 0x7CCF, 48250, 0xE80B, 0xFAC6, 0xFF50, math.MaxUint16, 0, 464, 1783, 5181, 0x2FED, 0x5EB7, 0x9BC5, 53490, 0xF03E, 0xFC4F, 65410, math.MaxUint16, 0, 366, 1332, 3880, 9273, 0x4899, 0x7D0E, 0xB368, 0xDD53, 0xF498, 0xFD83, 0xFFCB, math.MaxUint16, 0, 286, 1065, 3089, 6969, 0x3744, 0x611B, 0x9582, 0xC61B, 0xE6C6, 0xF7D8, 0xFE43, 0xFFC9, math.MaxUint16, 0, 0, 482, 2010, 5302, 0x28A8, 0x4A2C, 0x77EA, 0xAA72, 0xD3D9, 0xED9C, 0xFA77, 0xFF08, math.MaxUint16, math.MaxUint16, 0, 0, 0, 1006, 3531, 7857, 0x39F0, 0x5FDF, 0x8DB0, 0xB9BB, 0xDE33, 0xF377, 0xFCEA, math.MaxUint16, math.MaxUint16, math.MaxUint16, 0, 0, 0, 0, 1863, 4950, 10730, 0x4B54, 0x72D5, 0xA1A6, 0xCC6F, 0xE96B, 0xF95A, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, 0, 0, 0, 0, 0, 2513, 7290, 0x3897, 0x5ED3, 0x89F0, 0xB4A0, 0xDA21, 0xF237, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, 0, 0, 0, 0, 0, 0, 3606, 9573, 0x494C, 0x6FFB, 40220, 51290, 0xEA14, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, 0, 0, 0, 0, 0, 0, 0, 4879, 0x3323, 0x5B50, 0x8CDD, 0xC0F3, 0xE7B3, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16, math.MaxUint16}
var SKP_Silk_shell_code_table_offsets [19]uint16 = [19]uint16{0, 0, 3, 7, 12, 18, 25, 33, 42, 52, 63, 75, 88, 102, 117, 133, 150, 168, 187}
