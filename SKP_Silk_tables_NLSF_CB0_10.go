package silk

import "math"

const NLSF_MSVQ_CB0_10_STAGES = 6
const NLSF_MSVQ_CB0_10_VECTORS = 120

var SKP_Silk_NLSF_MSVQ_CB0_10_CDF [126]uint16 = [126]uint16{0, 2658, 4420, 6107, 7757, 9408, 0x2ACB, 0x30D6, 0x369F, 0x3C48, 0x41F2, 0x479B, 19750, 0x5274, 0x5789, 0x5C9D, 25010, 0x6690, 0x6B6D, 0x704B, 0x750D, 0x79B6, 0x7E5F, 0x8308, 0x87B0, 0x8C40, 0x9085, 0x94CB, 0x9911, 0x9D28, 0xA140, 0xA557, 0xA92C, 44290, 0xB0D7, 0xB498, 0xB858, 0xBC04, 0xBF88, 0xC2F9, 0xC657, 0xC9A2, 0xCCEE, 0xD027, 0xD34F, 0xD665, 0xD97B, 0xDC81, 0xDF86, 0xE27B, 0xE540, 0xE7F6, 0xEAAC, 0xED36, 0xEFB3, 0xF1FA, 0xF429, 0xF64C, 0xF837, 0xF9EF, 0xFB8C, 0xFCFE, 0xFDFF, 0xFEFF, math.MaxUint16, 0, 4977, 9542, 0x371A, 0x48EF, 0x5A01, 0x6AB7, 0x7B6C, 0x8C21, 0x9C21, 0xAB73, 0xBAC5, 0xC9C4, 55490, 0xE681, 0xF363, math.MaxUint16, 0, 8571, 0x42F6, 0x63B9, 0x847D, 0xA48C, 0xC340, 0xE1F4, math.MaxUint16, 0, 8732, 0x4437, 0x64E1, 0x84D7, 0xA4CD, 0xC414, 0xE2B0, math.MaxUint16, 0, 8948, 0x4528, 0x6485, 0x83E2, 0xA33F, 0xC29D, 0xE14E, math.MaxUint16, 0, 4374, 8655, 0x3288, 0x42E5, 0x5341, 0x6345, 0x7348, 0x834B, 37710, 0xA351, 45820, 0xC2A8, 0xD253, 0xE1A8, 0xF0FE, math.MaxUint16}
var SKP_Silk_NLSF_MSVQ_CB0_10_CDF_start_ptr [6]*uint16 = [6]*uint16{&SKP_Silk_NLSF_MSVQ_CB0_10_CDF[0], &SKP_Silk_NLSF_MSVQ_CB0_10_CDF[65], &SKP_Silk_NLSF_MSVQ_CB0_10_CDF[82], &SKP_Silk_NLSF_MSVQ_CB0_10_CDF[91], &SKP_Silk_NLSF_MSVQ_CB0_10_CDF[100], &SKP_Silk_NLSF_MSVQ_CB0_10_CDF[109]}
var SKP_Silk_NLSF_MSVQ_CB0_10_CDF_middle_idx [6]int32 = [6]int32{23, 8, 5, 5, 5, 9}
var SKP_Silk_NLSF_MSVQ_CB0_10_rates_Q5 [120]int16 = [120]int16{148, 167, 169, 170, 170, 173, 173, 175, 176, 176, 176, 177, 179, 181, 181, 181, 183, 183, 183, 184, 185, 185, 185, 185, 186, 189, 189, 189, 191, 191, 191, 194, 194, 194, 195, 195, 196, 198, 199, 200, 201, 201, 202, 203, 204, 204, 205, 205, 206, 209, 210, 210, 213, 214, 218, 220, 221, 226, 231, 234, 239, 256, 256, 256, 119, 123, 123, 123, 125, 126, 126, 126, 128, 130, 130, 131, 131, 135, 138, 139, 94, 94, 95, 95, 96, 98, 98, 99, 93, 93, 95, 96, 96, 97, 98, 100, 92, 93, 97, 97, 97, 97, 98, 98, 125, 126, 126, math.MaxInt8, math.MaxInt8, 128, 128, 128, 128, 128, 129, 129, 129, 130, 130, 131}
var SKP_Silk_NLSF_MSVQ_CB0_10_ndelta_min_Q15 [11]int32 = [11]int32{563, 3, 22, 20, 3, 3, 132, 119, 358, 86, 964}
var SKP_Silk_NLSF_MSVQ_CB0_10_Q15 [1200]int16 = [1200]int16{2210, 4023, 6981, 9260, 0x311D, 0x3D47, 0x4B07, 0x576F, 0x657D, 0x71D6, 3285, 4172, 6116, 0x2A68, 0x3BB9, 0x41BA, 0x4CF5, 22010, 0x6091, 0x7281, 1554, 2511, 6577, 0x2861, 0x360D, 0x407F, 0x4E76, 0x5AAE, 0x6770, 0x7318, 3062, 4017, 5771, 0x2735, 0x3435, 0x3A68, 20140, 0x596B, 0x628D, 0x73A3, 2085, 3457, 5934, 8718, 0x2CED, 13670, 0x464D, 0x5539, 0x6167, 0x7049, 2776, 4093, 6421, 0x28AD, 0x3B07, 0x41A6, 0x5159, 0x5D12, 0x66C4, 0x72E3, 2717, 4034, 5697, 8463, 0x37DD, 0x3FE2, 0x4A3F, 0x5B75, 0x64D4, 0x6F5A, 2872, 3702, 5881, 0x2B1A, 0x42F5, 0x49BF, 0x529A, 0x5B9B, 0x64D9, 29600, 2999, 4015, 7357, 0x2BD3, 0x3242, 0x439B, 0x4E71, 0x5874, 0x6896, 0x71B3, 2942, 3866, 5918, 0x2E8B, 0x3655, 0x3EC8, 0x4FE5, 0x5707, 27310, 0x7482, 2271, 3527, 6606, 9729, 0x328F, 0x43E6, 0x4F00, 0x5749, 0x601A, 28290, 2207, 3310, 5844, 9339, 0x2B85, 0x3D23, 0x4890, 0x52B9, 0x63CF, 0x6E44, 3963, 4975, 6901, 0x2D44, 0x349A, 0x3CD9, 0x4B1F, 0x5378, 25510, 0x6C6F, 2749, 3549, 6966, 0x35F0, 0x3D25, 0x44ED, 20090, 0x5847, 0x6763, 0x6F79, 2126, 3504, 5109, 9954, 12550, 14620, 0x4CF7, 0x54B7, 0x6759, 0x71B2, 3966, 5745, 7442, 9757, 0x3884, 0x4014, 0x4ABF, 0x5A08, 0x631F, 0x6EE7, 3197, 4751, 6451, 9298, 0x32EE, 0x3A1A, 0x462A, 0x5093, 0x5D1B, 0x6F30, 3195, 4081, 6499, 0x2FDC, 0x37D1, 16040, 0x47B5, 20730, 26980, 0x727D, 1533, 2471, 4486, 7796, 0x302C, 0x3D8E, 0x4C6F, 0x571A, 0x6449, 0x717B, 2002, 2971, 4985, 8083, 0x337D, 0x3C4B, 0x473D, 0x540D, 0x6013, 0x6EBF, 3808, 4925, 6710, 0x27D9, 0x2EEB, 14300, 0x4819, 0x4FA7, 0x679D, 0x711C, 2281, 3418, 4979, 8726, 0x3E5C, 0x46B8, 20250, 0x58F3, 0x62C6, 0x711A, 3051, 5479, 7290, 9848, 0x31C8, 0x38A7, 0x48E9, 0x5C84, 0x65D1, 0x7113, 2364, 3565, 5502, 9621, 0x3A4A, 0x40ED, 0x4A3D, 0x5204, 26310, 0x7276, 4093, 5212, 6833, 9880, 0x3FAF, 0x476E, 0x505B, 0x5C3E, 0x65D3, 0x71C8, 2941, 3996, 6038, 0x298E, 0x317C, 0x3873, 0x419E, 0x4BC0, 0x65C3, 0x6F65, 3863, 5212, 7019, 9468, 0x2B1F, 0x339E, 0x4DE6, 0x5748, 0x6226, 0x7363, 4615, 6172, 7853, 0x280C, 0x3143, 0x386D, 0x4D07, 0x57A9, 0x615A, 0x729D, 3566, 4512, 6985, 8684, 0x2930, 0x3EE1, 0x468A, 0x57CB, 0x65D2, 0x6E07, 4481, 5489, 7432, 0x2C96, 0x3387, 0x3B79, 0x4EC1, 0x56F2, 0x6774, 0x7414, 3320, 4320, 6621, 9867, 0x2D3D, 0x36D2, 0x52B0, 23210, 0x67DC, 0x74CF, 3794, 4689, 6916, 8655, 0x279F, 0x3F10, 0x4C70, 0x5454, 0x6BA5, 0x7399, 2446, 3276, 5918, 0x3163, 0x40D9, 0x465D, 0x5286, 0x5A87, 27300, 0x73C2, 2450, 3522, 5437, 8560, 0x3BB5, 0x4DC7, 0x5542, 0x5E21, 0x67C7, 0x7196, 2580, 3796, 5580, 8338, 9969, 0x3183, 0x49DB, 0x58E1, 25450, 0x726C, 3325, 4312, 6241, 7709, 9164, 0x3874, 0x54A1, 0x5CF5, 0x69D8, 0x74A1, 3338, 4163, 7738, 0x2B6A, 0x317C, 0x39A1, 0x4223, 0x58D0, 0x6447, 0x6DBD, 3840, 4755, 7755, 0x349F, 0x3BEA, 17180, 0x4E6D, 0x5751, 0x6A2D, 0x742F, 2504, 4079, 8351, 0x2F56, 0x3AC6, 0x48A3, 0x54B4, 0x6080, 0x6B7F, 0x74F1, 5234, 6342, 8267, 0x2E2D, 0x3B33, 16760, 0x50BB, 0x5BC0, 0x655D, 0x727B, 2681, 3562, 6028, 0x2A4B, 0x481A, 0x4FEA, 0x571F, 0x607D, 0x6920, 0x7504, 3374, 4528, 6230, 8256, 9513, 12730, 0x48EA, 0x50F0, 0x6597, 0x6F09, 2731, 3629, 8320, 12450, 0x3720, 0x402F, 0x4874, 0x5652, 0x62F1, 0x6C46, 3481, 4401, 7321, 9319, 0x2B36, 0x3325, 0x3B11, 0x572B, 0x66DB, 28740, 3577, 4945, 6669, 8792, 0x283B, 0x3165, 0x4C31, 0x60BE, 0x6974, 0x73C2, 4058, 5060, 7288, 10190, 0x2DCC, 0x3670, 0x3DE9, 0x486B, 0x684D, 0x7495, 4262, 5390, 7057, 8982, 0x27CB, 0x3BA0, 0x5000, 22340, 0x6566, 0x6DA8, 3404, 4329, 6629, 7946, 0x2789, 0x430D, 19640, 0x56E4, 0x61E6, 0x6B50, 3157, 4168, 6195, 9319, 0x2A13, 0x340D, 0x3C38, 0x4D68, 0x6060, 0x6BF2, 2503, 3473, 5130, 6767, 8571, 0x3A36, 0x4A59, 0x55A6, 0x65D1, 0x7038, 4133, 5102, 7553, 0x2746, 0x2DED, 0x3A4C, 0x441B, 0x4EDA, 0x5DB3, 0x66A0, 4972, 6139, 7894, 9633, 11320, 0x37D7, 0x54E9, 0x5EF2, 0x6927, 0x74D3, 2958, 3816, 6851, 9204, 0x2A8F, 0x4684, 0x5137, 0x5B2A, 0x6BA4, 0x73A9, 5234, 6028, 8034, 0x27AA, 0x2BEA, 0x39C5, 0x4A04, 0x51E6, 0x67D9, 0x71C7, 5241, 6838, 0x291E, 0x3213, 0x3959, 0x43B0, 0x4DD8, 0x5740, 0x6651, 0x7019, 3412, 4251, 5988, 7094, 9907, 0x4743, 0x54A5, 0x5CE1, 0x6959, 0x719F, 2470, 3217, 7797, 0x3BC0, 0x43D5, 0x4ABF, 0x55DB, 0x5EC0, 0x6ABA, 0x7302, 4939, 5804, 8145, 0x2E21, 0x3631, 0x3CEE, 0x4352, 0x4BDF, 0x676C, 0x73CD, 5051, 6167, 8223, 9655, 0x2F7F, 0x464B, 0x4FF0, 0x5930, 0x67F8, 0x6F2E, 4987, 5907, 9319, 0x2BED, 0x334C, 0x3AB0, 0x444D, 0x589F, 0x659B, 0x6E71, 5137, 6884, 0x2B11, 14950, 0x4327, 0x4BE1, 0x552F, 0x5F49, 0x693A, 0x7268, 7057, 7884, 9528, 0x28F3, 0x2AD0, 0x39DB, 19070, 0x54AB, 0x642D, 0x6D73, 6759, 7160, 8546, 0x2E03, 0x3007, 0x32DF, 0x40F3, 0x526B, 0x6079, 0x6E7F, 3863, 9762, 0x2B3C, 0x2CB5, 0x2F11, 13960, 0x46A5, 0x5403, 0x6288, 0x7145, 397, 335, 651, 1168, 640, 765, 465, 331, 214, -194, -578, -647, -657, 750, 564, 613, 549, 630, 304, -52, 828, 922, 443, 111, 138, 124, 169, 14, 144, 83, 132, 58, -413, -752, 869, 336, 385, 69, 56, 830, -227, -266, -368, -440, -1195, 163, 126, -228, 802, 156, 188, 120, 376, 59, -358, -558, -1326, -254, -202, -789, 296, 92, -70, -129, -718, -1135, 292, -29, -631, 487, -157, -153, -279, 2, -419, -342, -34, -514, -799, -1571, -687, -609, -546, -130, -215, -252, -446, -574, -1337, 207, -72, 32, 103, -642, 942, 733, 187, 29, -211, -814, 143, 225, 20, 24, -268, -377, 1623, 1133, 667, 164, 307, 366, 187, 34, 62, -313, -832, -1482, -1181, 483, -42, -39, -450, -1406, -587, -52, -760, 334, 98, -60, -500, -488, -1058, 299, 131, -250, -251, -703, 1037, 568, -413, -265, 1687, 573, 345, 323, 98, 61, -102, 31, 135, 149, 617, 365, -39, 34, -611, 1201, 1421, 736, -414, -393, -492, -343, -316, -532, 528, 172, 90, 322, -294, -319, -541, 503, 639, 401, 1, -149, -73, -167, 150, 118, 308, 218, 121, 195, -143, -261, -1013, -802, 387, 436, 130, -427, -448, -681, 123, -87, -251, -113, 274, 310, 445, 501, 354, 272, 141, -285, 569, 656, 37, -49, 251, -386, -263, 1122, 604, 606, 336, 95, 34, 0, 85, 180, 207, -367, -622, 1070, -6, -79, -160, -92, -137, -276, -323, -371, -696, -1036, 407, 102, -86, -214, -482, -647, -28, -291, -97, -180, -250, -435, -18, -76, -332, 410, 407, 168, 539, 411, 254, 111, 58, -145, 200, 30, 187, 116, 131, -367, -475, 781, -559, 561, 195, -115, 8, -168, 30, 55, -122, 131, 82, -5, -273, -50, -632, 668, 4, 32, -26, -279, 315, 165, 197, 377, 155, -41, -138, -324, -109, -617, 360, 98, -53, -319, -114, -245, -82, 507, 468, 263, -137, -389, 652, 354, -18, -227, -462, -135, 317, 53, -16, 66, -72, -126, -356, -347, -328, -72, -337, 324, 152, 349, 169, -196, 179, 254, 260, 325, -74, -80, 75, -31, 270, 275, 87, 278, -446, -301, 309, 71, -25, -242, 516, 161, -162, -83, 329, 230, -311, -259, 177, -26, -462, 89, 257, 6, -130, -93, -456, -317, -221, -206, -417, -182, -74, 234, 48, 261, 359, 231, 258, 85, -282, 252, -147, -222, 251, -207, 443, 123, -417, -36, 273, -241, 240, -112, 44, -167, 126, -124, -77, 58, -401, 333, -118, 82, 126, 151, -433, 359, -130, -102, 131, -244, 86, 85, -462, 414, -240, 16, 145, 28, -205, -481, 373, 293, -72, -174, 62, 259, -8, -18, 362, 233, 185, 43, 278, 27, 193, 570, -248, 189, 92, 31, -275, -3, 243, 176, 438, 209, 206, -51, 79, 109, 168, -185, -308, -68, -618, 385, -310, -108, -164, 165, 61, -152, -101, -412, -268, -257, -40, -20, -28, -158, -301, 271, 380, -338, -367, -132, 64, 114, -131, -225, -156, -260, -63, -116, 155, -586, -202, 254, -287, 178, 227, -106, -294, 164, 298, -100, 185, 317, 193, -45, 28, 80, -87, -433, 22, -48, 48, -237, -229, -139, 120, -364, 268, -136, 396, 125, 130, -89, -272, 118, -256, -68, -451, 488, 143, -165, -48, -190, 106, 219, 47, 435, 245, 97, 75, -418, 121, -187, 570, -200, -351, 225, -21, -217, 234, -111, 194, 14, 242, 118, 140, -397, 355, 361, -45, -195}
var SKP_Silk_NLSF_CB0_10_Stage_info [6]SKP_Silk_NLSF_CBS = [6]SKP_Silk_NLSF_CBS{{NVectors: 64, CB_NLSF_Q15: &SKP_Silk_NLSF_MSVQ_CB0_10_Q15[10*0], Rates_Q5: &SKP_Silk_NLSF_MSVQ_CB0_10_rates_Q5[0]}, {NVectors: 16, CB_NLSF_Q15: &SKP_Silk_NLSF_MSVQ_CB0_10_Q15[10*64], Rates_Q5: &SKP_Silk_NLSF_MSVQ_CB0_10_rates_Q5[64]}, {NVectors: 8, CB_NLSF_Q15: &SKP_Silk_NLSF_MSVQ_CB0_10_Q15[10*80], Rates_Q5: &SKP_Silk_NLSF_MSVQ_CB0_10_rates_Q5[80]}, {NVectors: 8, CB_NLSF_Q15: &SKP_Silk_NLSF_MSVQ_CB0_10_Q15[10*88], Rates_Q5: &SKP_Silk_NLSF_MSVQ_CB0_10_rates_Q5[88]}, {NVectors: 8, CB_NLSF_Q15: &SKP_Silk_NLSF_MSVQ_CB0_10_Q15[10*96], Rates_Q5: &SKP_Silk_NLSF_MSVQ_CB0_10_rates_Q5[96]}, {NVectors: 16, CB_NLSF_Q15: &SKP_Silk_NLSF_MSVQ_CB0_10_Q15[10*104], Rates_Q5: &SKP_Silk_NLSF_MSVQ_CB0_10_rates_Q5[104]}}
var SKP_Silk_NLSF_CB0_10 SKP_Silk_NLSF_CB_struct = SKP_Silk_NLSF_CB_struct{NStages: NLSF_MSVQ_CB0_10_STAGES, CBStages: &SKP_Silk_NLSF_CB0_10_Stage_info[0], NDeltaMin_Q15: &SKP_Silk_NLSF_MSVQ_CB0_10_ndelta_min_Q15[0], CDF: &SKP_Silk_NLSF_MSVQ_CB0_10_CDF[0], StartPtr: &SKP_Silk_NLSF_MSVQ_CB0_10_CDF_start_ptr[0], MiddleIx: &SKP_Silk_NLSF_MSVQ_CB0_10_CDF_middle_idx[0]}
